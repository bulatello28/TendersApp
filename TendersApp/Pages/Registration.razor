@page "/registration"

<PageTitle>Registration</PageTitle>

@using TendersApp.Data
@using TendersApp.Users
@using TendersApp.Components
@inject IJSRuntime JsRuntime
@inject MongoDb MongoDb
@inject NavigationManager nManager

<link rel="stylesheet" href="RegStyle.css" />


<div class="register-user" >
    <h3 style="color: black; text-shadow: 1px 1px 1px black;">Регистрация</h3>
    <label>Логин:</label> <input placeholder="Логин" @bind-value="@user.Login" />
    <br /><br />
    <label>Пароль:</label> <input placeholder="Пароль" type="password" @bind-value="@user.Password" />
    <br /><br />
    <label>Email:</label> <input placeholder="Email" @bind-value="@user.Email" />
    <br /><br />
    <label>Номер:</label> <input placeholder="Номер" @bind-value="@user.PhoneNumber" />
    <br /><br />
    <label>Выберите вашу роль:</label>

    <select @bind="@role">
        <option value="Заказчик">Заказчик</option>
        <option value="Застройщик">Застройщик</option>
        <option value="Проектировщик">Проектировщик</option>
    </select>
    <button type="submit" style="color" @onclick="() => AddToDataBase()">Sign Up</button>
</div>


@code {
    string role = "";
    /*string firstName = "";
    string login = "";
    string password = "";
    string email = "";
    string lastName = "";
    string phoneNumber = "";*/

    User user = new User();

    CustomerComponent customerComponent;
    DeveloperComponent developerComponent;
    DesignerComponent designerComponent;

    private async Task AddToDataBase()
    {
        if (user.PhoneNumber.Length < 11)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Некорректный телефон");
            return;
        }
        if (!(user.Email.Contains('@')))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Неккоректная электронная почта");
            return;
        }
        if (role == "Заказчик")
        {
            MongoDb.AddCustomerToDataBase(new Customer(user.Login, user.Password, user.Email,
            user.PhoneNumber, Enums.Roles.Customer));
            await JsRuntime.InvokeVoidAsync("alert", "Пользователь зарегистрирован");
            nManager.NavigateTo("/authorization");
        }
        else if (role == "Проектировщик")
        {
            MongoDb.AddDesignerToDataBase(new Designer(user.Login, user.Password, user.Email,
            user.PhoneNumber, Enums.Roles.Designer));
            await JsRuntime.InvokeVoidAsync("alert", "Пользователь зарегистрирован");
            nManager.NavigateTo("/authorization");
        }
        else if (role == "Застройщик")
        {   
            MongoDb.AddDeveloperToDataBase(new Developer(user.Login, user.Password, user.Email,
            user.PhoneNumber, Enums.Roles.Developer));
            await JsRuntime.InvokeVoidAsync("alert", "Пользователь зарегистрирован");
            nManager.NavigateTo("/authorization");
        }

    }

}
